priority -50

############
#  COMMON  #
############

# The smart snippets use a global options called
# "g:ultisnips_javascript.{option}" which can control the format
# of trailing semicolon, space before function paren, etc.
#
# e.g.
# let g:ultisnips_javascript = {
#      \ 'keyword-spacing': 'always',
#      \ 'semi': 'never',
#      \ 'space-before-function-paren': 'always',
#      \ }


global !p
from javascript_snippets import (
	semi, space_before_function_paren, keyword_spacing
)
endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet get "Get Elements"
getElement${1/(T)|(C)|.*/(?1:s)(?2:s)/}By${1:T}${1/(T)|(I)|(C).*/(?1:agName)(?2:d)(?3:lassName)/}('$2')
endsnippet

snippet '':f "object method string"
'${1:${2:#thing}:${3:click}}': function`!p snip.rv = space_before_function_paren(snip)`(element) {
	${VISUAL}$0
}${10:,}
endsnippet

snippet :f "Object Method"
${1:method_name}: function`!p snip.rv = space_before_function_paren(snip)`(${3:attribute}) {
	${VISUAL}$0
}${10:,}
endsnippet

snippet :, "Object Value JS"
${1:value_name}: ${0:value},
endsnippet

snippet : "Object key key: 'value'"
${1:key}: ${2:"${3:value}"}${4:, }
endsnippet

snippet proto "Prototype (proto)"
${1:class_name}.prototype.${2:method_name} = function`!p snip.rv = space_before_function_paren(snip)`(${3:first_argument}) {
	${VISUAL}$0
}`!p snip.rv = semi(snip)`

endsnippet

snippet fun "function (named)" b
function ${1:function_name}`!p snip.rv = space_before_function_paren(snip)`(${2:argument}) {
	${VISUAL}$0
}
endsnippet

snippet vf "function (assigned to var)"
${1:var }${2:function_name} = function $2`!p snip.rv = space_before_function_paren(snip)`($3) {
	${VISUAL}$0
}`!p snip.rv = semi(snip)`
endsnippet

# Drop priority so this only triggers when not beginning of line.
priority -51
snippet fun "function (anonymous)" w
function`!p snip.rv = space_before_function_paren(snip)`($1) {
	${VISUAL}$0
}$2
endsnippet
priority -50

snippet anf "function (anonymous)" i
function`!p snip.rv = space_before_function_paren(snip)`($1) {
	${VISUAL}$0
}
endsnippet

snippet iife "Immediately-Invoked Function Expression (iife)"
(function`!p snip.rv = space_before_function_paren(snip)`(${1:window}) {
	${VISUAL}$0
}(${2:$1}))`!p snip.rv = semi(snip)`
endsnippet

snippet ;fe "Minify safe iife"
;(function`!p snip.rv = space_before_function_paren(snip)`(${1}) {
	${VISUAL}$0
}(${2}))
endsnippet

snippet timeout "setTimeout function"
setTimeout(function`!p snip.rv = space_before_function_paren(snip)`() {
	${VISUAL}$0
}${2:.bind(${3:this})}, ${1:10})`!p snip.rv = semi(snip)`
endsnippet

snippet fi "for prop in obj using hasOwnProperty" b
for`!p snip.rv = keyword_spacing(snip)`(${1:prop} in ${2:obj}){
	if`!p snip.rv = keyword_spacing(snip)`($2.hasOwnProperty($1)) {
		${VISUAL}$0
	}
}
endsnippet

snippet if "if (condition) { ... }"
if`!p snip.rv = keyword_spacing(snip)`(${1:true}) {
	${VISUAL}$0
}
endsnippet

snippet ife "if (condition) { ... } else { ... }"
if`!p snip.rv = keyword_spacing(snip)`(${1:true}) {
	${VISUAL}$0
}`!p snip.rv = keyword_spacing(snip)`else`!p snip.rv = keyword_spacing(snip)`{
	${2}
}
endsnippet

snippet switch
switch`!p snip.rv = keyword_spacing(snip)`(${VISUAL}${1:expression}) {
	case '${VISUAL}${3:case}':
		${4}
		break`!p snip.rv = semi(snip)`
	${0}
	default:
		${2}
}
endsnippet

snippet case "case 'xyz': ... break"
case`!p snip.rv = keyword_spacing(snip)`'${VISUAL}${1:case}':
	${VISUAL}$0
	break`!p snip.rv = semi(snip)`
endsnippet

snippet do "do { ... } while (condition)"
do`!p snip.rv = keyword_spacing(snip)`{
	${VISUAL}$0
}`!p snip.rv = keyword_spacing(snip)`while`!p snip.rv = keyword_spacing(snip)`(${1:/* condition */})`!p snip.rv = semi(snip)`
endsnippet

snippet ret "Return statement"
return ${VISUAL}$0`!p snip.rv = semi(snip)`
endsnippet

snippet us
'use strict'`!p snip.rv = semi(snip)`
endsnippet

############### converted functions #################

# Functions
snippet fun "function"
	function ${1:function_name}(${2}) {
		${0:${VISUAL}}
	}
endsnippet

snippet asf "async function"
	async function ${1:function_name}(${2}) {
		${0:${VISUAL}}
	}
endsnippet

snippet anf "anonymous function" w
	function(${1}) {
		${0:${VISUAL}}
	}
endsnippet

snippet sdf "self-defining function"
	var ${1:function_name} = function (${2:argument}) {
		${3}

		$1 = function ($2) {
			${0:${VISUAL}}
		};
	};
endsnippet

snippet ter
	${1:/* condition */} ? ${2:/* if true */} : ${0:/* if false */}
endsnippet

snippet try "try { ... } catch(e) { ... }"
	try {
		${1:${VISUAL}}
	} catch (${2:err}) {
		${3:/* handle error */}
	}
endsnippet

snippet tryf "try { ... } catch(e) { ... } finally { ... }"
	try {
		${0:${VISUAL}}
	} catch (${1:e}) {
		${2:/* handle error */}
	} finally {
		${3:/* be executed regardless of the try / catch result*/}
	}
endsnippet

snippet terr "throw error"
	throw new Error('${1:error message}')
endsnippet

snippet for "for (...) {...}"
	for (var ${1:i} = 0, ${2:len} = ${3:Things.length}; $1 < $2; $1++) {
		${0:${VISUAL}}
	}
endsnippet

snippet forr "reversed for (...) {...}"
	for (var ${2:i} = ${1:Things.length} - 1; $2 >= 0; $2--) {
		${0:${VISUAL}}
	}
endsnippet

snippet wh "(condition) { ... }"
	while (${1:/* condition */}) {
		${0:${VISUAL}}
	}
endsnippet

snippet fori "for in loop"
	for (var ${1:prop} in ${2:object}) {
		${0:$2[$1]}
	}
endsnippet

snippet :f
	${1:method_name}: function (${2:attribute}) {
		${0:${VISUAL}}
	},
endsnippet

snippet sing "singleton"
	function ${1:Singleton} (${2:argument}) {
		// the cached instance
		var instance;

		// rewrite the constructor
		$1 = function $1($2) {
			return instance;
		};

		// carry over the prototype properties
		$1.prototype = this;

		// the instance
		instance = new $1();

		// reset the constructor pointer
		instance.constructor = $1;

		${0}

		return instance;
	}
endsnippet

snippet obj "Crockford's object function"
	function object(o) {
		function F() {}
		F.prototype = o;
		return new F();
	}
endsnippet

snippet props "define multiple props"
	var ${1:my_object} = Object.defineProperties(
		${2:new Object()},
		{
			${3:property} : {
				get : function $1_$3_getter() {
					// getter code
				},
				set : function $1_$3_setter(value) {
					// setter code
				},
				value        : ${4:value},
				writeable    : ${5:boolean},
				enumerable   : ${6:boolean},
				configurable : ${0:boolean}
			}
		}
	);
endsnippet

snippet prop "define single prop"
	Object.defineProperty(
		${1:object},
		'${2:property}',
		{
			get : function $1_$2_getter() {
				// getter code
			},
			set : function $1_$2_setter(value) {
				// setter code
			},
			value        : ${3:value},
			writeable    : ${4:boolean},
			enumerable   : ${5:boolean},
			configurable : ${0:boolean}
		}
	);
endsnippet

# Documentation
snippet /** "docstring"
	/**
	 * ${0:description}
	 *
	 */
endsnippet

snippet @par
	@param {${1:type}} ${2:name} ${0:description}
endsnippet

snippet @ret
	@return {${1:type}} ${0:description}
endsnippet

snippet jsonp "JSON parse"
	JSON.parse(${0:jstr});
endsnippet

snippet jsons "JSON stringify"
	JSON.stringify(${0:object});
endsnippet

snippet by. "element by class"
	${1:document}.getElementsByClassName('${0:class}')
endsnippet

snippet by# "element by ID"
	${1:document}.getElementById('${0:element ID}')
endsnippet

snippet qs "query selector"
	${1:document}.querySelector('${0:CSS selector}')
endsnippet

snippet qsa "query selector all"
	${1:document}.querySelectorAll('${0:CSS selector}')
endsnippet

snippet de "debugger"
	debugger;
endsnippet

snippet cl "console.log"
	console.log(${0});
endsnippet

snippet cd "console.debug"
	console.debug(${0});
endsnippet

snippet ce "console.error"
	console.error(${0});
endsnippet

snippet cw "console.warn"
	console.warn(${0});
endsnippet

snippet ci "console.info"
	console.info(${0});
endsnippet

snippet ct "console.trace"
	console.trace(${0:label});
endsnippet

snippet ctime "console.time ... console.timeEnd"
	console.time("${1:label}");
	${0:${VISUAL}}
	console.timeEnd("$1");
endsnippet

snippet ctimestamp "console.timeStamp"
	console.timeStamp("${1:label}");
endsnippet

snippet ca "console.assert"
	console.assert(${1:expression}, ${0:obj});
endsnippet

snippet cclear "console.clear"
	console.clear();
endsnippet

snippet cdir "console.dir"
	console.dir(${0:obj});
endsnippet

snippet cdirx "console.dirxml"
	console.dirxml(${1:object});
endsnippet

snippet cgroup "console.group"
	console.group("${1:label}");
	${0:${VISUAL}}
	console.groupEnd();
endsnippet

snippet cgroupc "console.groupCollapsed"
	console.groupCollapsed("${1:label}");
	${0:${VISUAL}}
	console.groupEnd();
endsnippet

snippet cprof "console.profile"
	console.profile("${1:label}");
	${0:${VISUAL}}
	console.profileEnd();
endsnippet

snippet ctable "console.table"
	console.table(${1:"${2:value}"});
endsnippet

# Misc
snippet us
	'use strict';
endsnippet

snippet const
	const ${1} = ${0};
endsnippet

snippet constn
	const ${1} = new ${0};
endsnippet

snippet let
	let ${1} = ${0};
endsnippet

snippet im "import xyz from 'xyz'"
	import ${1} from '${2:$1}';
endsnippet

snippet imas "import * as xyz from 'xyz'"
	import * as ${1} from '${2:$1}';
endsnippet

snippet imm "import { member } from 'xyz'"
	import { ${1} } from '${2}';
endsnippet

snippet cla
	class ${1} {
		${0:${VISUAL}}
	}
endsnippet

snippet clax
	class ${1} extends ${2} {
		${0:${VISUAL}}
	}
endsnippet

snippet clac
	class ${1} {
		constructor(${2}) {
			${0:${VISUAL}}
		}
	}
endsnippet

snippet foro "for (const prop of object}) { ... }"
	for (const ${1:prop} of ${2:object}) {
		${0:$1}
	}
endsnippet

snippet fun*
	function* ${1:function_name}(${2}) {
		${0:${VISUAL}}
	}
endsnippet

snippet c=>
	const ${1:function_name} = (${2}) => {
		${0:${VISUAL}}
	}
endsnippet

snippet ca=>
	const ${1:function_name} = async (${2}) => {
		${0:${VISUAL}}
	}
endsnippet

snippet canf
	const ${1:function_name} = (${2}) => {
		${0:${VISUAL}}
	}
endsnippet

snippet casf
	const ${1:function_name} = async (${2}) => {
		${0:${VISUAL}}
	}
endsnippet

snippet =>
	(${1}) => {
		${0:${VISUAL}}
	}
endsnippet

snippet af "() =>"
	(${1}) => ${0:${VISUAL}}
endsnippet

snippet afb "() => {}"
	(${1}) => {
		${0:${VISUAL}}
	}
endsnippet

snippet sym
	const ${1} = Symbol('${0}');
endsnippet

snippet ed
	export default ${0}
endsnippet

snippet ${
	${${1}}${0}
endsnippet

snippet aw "await"
	await ${0:${VISUAL}}
endsnippet

# vim:ft=snippets:
